{"version":3,"file":"static/webpack/static/development/pages/dynamic.js.3f3c03f75e98011125e2.hot-update.js","sources":["webpack:///./components/mylayout.js","webpack:///./pages/dynamic.js"],"sourcesContent":["import Header from './header'\n// import DynaHeader from '../components/dynamicheader.js'\n\nconst layoutStyle = {\n  margin: 20,\n  padding: 20,\n  border: '1px solid #DDD'\n}\n\nconst Layout = props => (\n  <div style={layoutStyle}>\n    {/* <Header /> */}\n    {/* <DynaHeader json=\"My dynamic header\" /> */}\n    {props.children}\n  </div>\n)\n\nexport default Layout","import React from 'react'\nimport Layout from '../components/mylayout.js'\nimport Banner from '../components/banner.js'\nimport SimpleText from '../components/simpletext.js'\nimport RichTextField from '../components/richtextfield.js'\nimport dynamic from 'next/dynamic'\nimport fetch from 'isomorphic-unfetch'\nimport DynaHeader from '../components/dynamicheader.js'\nimport Link from \"next/link\";\n\nexport default class Dyn extends React.Component {\n  static async getInitialProps({ query }) {\n    const url = `https://c1.adis.ws/cms/content/query?query=%7b%22sys.iri%22:%22http://content.cms.amplience.net/${query.id}%22%7d&scope=tree&store=twe&fullBodyObject=true`\n    const menuUrl = `https://c1.adis.ws/cms/content/query?query=%7b%22sys.iri%22:%22http://content.cms.amplience.net/6aee88e2-0358-429a-b721-82dd6854c4a1%22%7d&scope=tree&store=twe&fullBodyObject=true`\n\n    console.log('QUERYYYYY', query)\n    const res = await fetch(url)\n    const data = await res.json()\n\n    const resMenu = await fetch(menuUrl)\n    const dataMenu = await resMenu.json()\n\n    return { data, dataMenu }\n  }\n\n  mapTypeToComponent = (typeName, componentProps, image) => {\n    switch(typeName) {\n      case 'http://twe-poc.way.com/banner.json':\n        return <Banner {...componentProps} image={image} />\n      case 'http://twe-poc.way.com/simpletextblock.json':\n        return  <SimpleText {...componentProps} />\n      case 'http://twe-poc.way.com/richtextfield.json':\n        return <RichTextField {...componentProps} />\n    }\n  }\n\n  getComponentProps = (componentId, componentList) => {\n    return componentList.find((item) => item['@id'] === componentId)\n  }\n\n  getMenuComponentProps = (componentId, componentList) => {\n    return componentList.find((item) => item['@id'] === componentId)\n  }\n\n  getGuidFromId(componentId){\n    // console.log('Splitting... ' + componentId + ' ' + componentId.length)\n    if (componentId.length >= 0){\n      var parts = componentId.split('/')\n      // console.log('Parts... ' + parts.length)\n      \n      if (parts.length >= 0){\n        return parts[parts.length - 1]\n      }\n    }\n    return \"\"\n  }\n\n  render() {\n    const { data } = this.props\n    const { dataMenu } = this.props\n    console.log(dataMenu)\n    const componentList = data['@graph']\n    const menuComponentList = dataMenu['@graph']\n    const imageList = componentList.filter((item) => item.mediaType === 'image')\n\n    const linkStyle = {\n      marginRight: 15\n    };\n    \n    return (\n      <div>\n        <DynaHeader>\n          {\n            menuComponentList[0].slugs.map((item, index) => {\n              const componentProps = this.getMenuComponentProps(item['@id'], menuComponentList)\n              \n              // Debugging\n              console.log('component props ' + componentProps)\n              var pageId = this.getGuidFromId(componentProps.page['@id'])\n              // console.log('Link to... ' + pageId)\n              var navUrl = '/dynamic?id=' + pageId\n\n              return <Link prefetch href={navUrl}>\n                <a href={navUrl} style={linkStyle}>{componentProps.navLabel}</a>\n              </Link>\n            }\n          )}\n        </DynaHeader>\n        <Layout>\n          { componentList[0].slotContent.map((item, index) => {\n              let image = null\n              const componentProps = this.getComponentProps(item['@id'], componentList)\n\n              if (componentProps.background) {\n                image = imageList.find((imageItem) => imageItem['@id'] === componentProps.background['@id'])\n              }\n\n              return <div key={`key-${index}`}>\n                {this.mapTypeToComponent(item['@type'], componentProps, image)}\n              </div>\n          })}\n        </Layout>\n      </div>\n    )\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AADA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;;;;;;;;;;;;AA7FA;AACA;AACA;AAEA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;;AAEA;AACA;;AADA;;AACA;AACA;;AADA;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAbA;AACA;;;;;A","sourceRoot":""}