{"version":3,"file":"static/webpack/static/development/pages/index.js.4bd3099fc165f42bd0ad.hot-update.js","sources":["webpack:///./components/dynamicheader.js","webpack:///./components/mylayout.js","webpack:///./pages/index.js"],"sourcesContent":["import React from \"react\";\nimport Link from \"next/link\";\n\nexport default class DynaHeader extends React.Component {\n  render() {\n    const linkStyle = {\n      marginRight: 15\n    };\n    \n    return (\n      <div>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n","import Header from './header'\n// import DynaHeader from '../components/dynamicheader.js'\n\nconst layoutStyle = {\n  margin: 20,\n  padding: 20,\n  border: '1px solid #DDD'\n}\n\nconst Layout = props => (\n  <div>\n    {/* <Header /> */}\n    {/* <DynaHeader json=\"My dynamic header\" /> */}\n    {props.children}\n  </div>\n)\n\nexport default Layout","import React from 'react'\nimport Layout from '../components/mylayout.js'\nimport Banner from '../components/banner.js'\nimport SimpleText from '../components/simpletext.js'\nimport RichTextField from '../components/richtextfield.js'\nimport dynamic from 'next/dynamic'\nimport fetch from 'isomorphic-unfetch'\nimport DynaHeader from '../components/dynamicheader.js'\nimport Link from \"next/link\";\nimport Head from 'next/head'\n\nexport default class Dyn extends React.Component {\n  static async getInitialProps({ query }) {\n    \n    console.log('Page requested with... id=' + query.id)\n\n    // Get Site Id / Name\n    var siteName = 'mysite'\n\n    // Create a route for the initial render of the page\n    if (query.id == null || query.id == '' || query.id == '/')\n      query = {id: '/'}\n\n    // Url for Root of CMS Tree, returning all nodes\n    const treeRootUrl = `https://c1.adis.ws/cms/content/query?query=%7b%22sys.iri%22:%22http://content.cms.amplience.net/6aee88e2-0358-429a-b721-82dd6854c4a1%22%7d&scope=tree&store=twe&fullBodyObject=true`\n    \n    // Fetch tree structure / content\n    const resMenu = await fetch(treeRootUrl)\n    const dataMenu = await resMenu.json()\n    \n    // Get route from Data\n    var siteId = '';\n    await fetch(treeRootUrl)\n      .then(response => response.json())\n      .then(json => {\n        console.log('not await finished')\n        siteId = this.getCustomRoute(json, query.id)\n        console.log('SiteId... ' + siteId)\n      })\n    \n    const url = `https://c1.adis.ws/cms/content/query?query=%7b%22sys.iri%22:%22http://content.cms.amplience.net/${siteId}%22%7d&scope=tree&store=twe&fullBodyObject=true`\n    \n    const res = await fetch(url)\n    const data = await res.json()\n\n    return { data, dataMenu, siteName }\n  }\n\n  mapTypeToComponent = (typeName, componentProps, image) => {\n    switch(typeName) {\n      case 'http://twe-poc.way.com/banner.json':\n        return <Banner {...componentProps} image={image} />\n      case 'http://twe-poc.way.com/simpletextblock.json':\n        return  <SimpleText {...componentProps} />\n      case 'http://twe-poc.way.com/richtextfield.json':\n        return <RichTextField {...componentProps} />\n    }\n  }\n\n  // This method gets custom routes by looking up the nav path and finding the id\n  static getCustomRoute = (data, path) => {\n    console.log('Path... ' + path)\n    var componentList = data['@graph']\n    console.log('componentList... ' + componentList)\n    const componentProps = componentList.find((item) => item['slug'] === path)\n    console.log('componentProps...' + componentProps)\n    \n    if (componentProps != null){\n      var componentId = componentProps.page['@id']\n      if (componentId.length >= 0){\n        var parts = componentId.split('/')\n        \n        if (parts.length >= 0){\n          return parts[parts.length - 1]\n        }\n      }\n    }\n    return 'f7182c56-7553-43b0-af98-dd5b04a1b912'\n  }\n\n  getComponentProps = (componentId, componentList) => {\n    return componentList.find((item) => item['@id'] === componentId)\n  }\n\n  getGuidFromId(componentId){\n    if (componentId.length >= 0){\n      var parts = componentId.split('/')\n      \n      if (parts.length >= 0){\n        return parts[parts.length - 1]\n      }\n    }\n    return \"\"\n  }\n\n  render() {\n    const { data } = this.props\n    const { dataMenu } = this.props\n    const componentList = data['@graph']\n    const menuComponentList = dataMenu['@graph']\n    const imageList = componentList.filter((item) => item.mediaType === 'image')\n    const { siteName } = this.props\n\n    const linkStyle = {\n      marginRight: 15\n    };\n    \n    return (\n      <div>\n        <Head>\n          <title>Treasure Wine Estates - POC</title>\n          <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\" />\n        </Head>\n        <div className='container'>\n          <nav className='nav'>\n            <DynaHeader>\n              {\n                menuComponentList[0].slugs.map((item, index) => {\n                  const componentProps = this.getComponentProps(item['@id'], menuComponentList)\n                  \n                  var pageId = this.getGuidFromId(componentProps.page['@id'])\n                  var navUrl = `/index?site=${siteName}&id=${pageId}`\n                  var customRoute = `/index?site=${siteName}&id=${componentProps.slug}`\n\n                  return <Link className='nav-item' prefetch href={customRoute} key={`key-${index}`}>\n                    <a class='nav-item' href={customRoute} style={linkStyle}>{componentProps.navLabel}</a>\n                  </Link>\n                }\n              )}\n            </DynaHeader>\n          </nav>\n          <Layout>\n            { componentList[0].slotContent.map((item, index) => {\n                let image = null\n                const componentProps = this.getComponentProps(item['@id'], componentList)\n\n                if (componentProps.background) {\n                  image = imageList.find((imageItem) => imageItem['@id'] === componentProps.background['@id'])\n                }\n\n                return <div key={`key-${index}`}>\n                  {this.mapTypeToComponent(item['@type'], componentProps, image)}\n                </div>\n            })}\n          </Layout>\n        </div>\n        \n      </div>\n    )\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AACA;AACA;AADA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAXA;AACA;;;;;;;;;;;;;;;;;;;ACJA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAqCA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAQA;AACA;AAsBA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AACA;AADA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAMA;;;;;;;;;;;;;;AAzIA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;;AAEA;AACA;;AADA;;AACA;AACA;;AADA;AAEA;AACA;;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;;AACA;;AAEA;AACA;;AADA;;AACA;AACA;;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAnCA;AACA;AADA;AAkDA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;A","sourceRoot":""}